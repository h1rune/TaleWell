// <auto-generated />
using System;
using ArtService.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ArtService.Persistence.Migrations
{
    [DbContext(typeof(ArtServiceDbContext))]
    partial class ArtServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArtService.Domain.Chapter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<Guid>("VolumeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VolumeId", "Order");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("ArtService.Domain.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSpoiler")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParagraphId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SpoilerChapterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.HasIndex("ParagraphId");

                    b.HasIndex("SpoilerChapterId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ArtService.Domain.Paragraph", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChapterId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("S3Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId", "Order");

                    b.ToTable("Paragraphs");
                });

            modelBuilder.Entity("ArtService.Domain.Reaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParagraphId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PutAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParagraphId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("ArtService.Domain.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Mark")
                        .HasColumnType("integer");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<Guid>("WorkId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ArtService.Domain.Volume", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CoverKey")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<Guid>("WorkId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkId", "Order");

                    b.ToTable("Volumes");
                });

            modelBuilder.Entity("ArtService.Domain.Work", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsFanfic")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OriginalWorkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OriginalWorkId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("ArtService.Domain.Chapter", b =>
                {
                    b.HasOne("ArtService.Domain.Volume", "RelatedVolume")
                        .WithMany("Chapters")
                        .HasForeignKey("VolumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedVolume");
                });

            modelBuilder.Entity("ArtService.Domain.Comment", b =>
                {
                    b.HasOne("ArtService.Domain.Paragraph", "RelatedParagraph")
                        .WithMany("Comments")
                        .HasForeignKey("ParagraphId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtService.Domain.Chapter", "SpoilerChapter")
                        .WithMany()
                        .HasForeignKey("SpoilerChapterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("RelatedParagraph");

                    b.Navigation("SpoilerChapter");
                });

            modelBuilder.Entity("ArtService.Domain.Paragraph", b =>
                {
                    b.HasOne("ArtService.Domain.Chapter", "RelatedChapter")
                        .WithMany("Paragraphs")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedChapter");
                });

            modelBuilder.Entity("ArtService.Domain.Reaction", b =>
                {
                    b.HasOne("ArtService.Domain.Paragraph", "RelatedParagraph")
                        .WithMany("Reactions")
                        .HasForeignKey("ParagraphId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedParagraph");
                });

            modelBuilder.Entity("ArtService.Domain.Review", b =>
                {
                    b.HasOne("ArtService.Domain.Work", "ReviewedWork")
                        .WithMany("Reviews")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReviewedWork");
                });

            modelBuilder.Entity("ArtService.Domain.Volume", b =>
                {
                    b.HasOne("ArtService.Domain.Work", "RelatedWork")
                        .WithMany("Volumes")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedWork");
                });

            modelBuilder.Entity("ArtService.Domain.Work", b =>
                {
                    b.HasOne("ArtService.Domain.Work", "OriginalWork")
                        .WithMany("Fanfics")
                        .HasForeignKey("OriginalWorkId");

                    b.Navigation("OriginalWork");
                });

            modelBuilder.Entity("ArtService.Domain.Chapter", b =>
                {
                    b.Navigation("Paragraphs");
                });

            modelBuilder.Entity("ArtService.Domain.Paragraph", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("ArtService.Domain.Volume", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("ArtService.Domain.Work", b =>
                {
                    b.Navigation("Fanfics");

                    b.Navigation("Reviews");

                    b.Navigation("Volumes");
                });
#pragma warning restore 612, 618
        }
    }
}
